{"ast":null,"code":"var _jsxFileName = \"D:\\\\FullStack\\\\ResuNinja\\\\frontend\\\\src\\\\components\\\\Logout.js\",\n  _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAlert } from \"../context/AlertContext\";\nimport { useUser } from \"../context/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Logout() {\n  _s();\n  const {\n    setUser\n  } = useUser();\n  const {\n    addAlert\n  } = useAlert();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const handleLogout = async () => {\n      const refresh = localStorage.getItem('refresh_token');\n      try {\n        const response = await fetch('http://localhost:8000/api/logout/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            refresh\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Logout Failed');\n        }\n\n        // Clear tokens and user data from local storage\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('user');\n        setUser({}); // Reset user state in context\n\n        addAlert('Logout successful!', 'success');\n        navigate('/login'); // Navigate to login page after logout\n      } catch (e) {\n        addAlert(e.message, 'error');\n        navigate('/login'); // Navigate to login page on error as well\n      }\n    };\n    handleLogout(); // Call the logout function on component mount\n  }, [setUser, navigate, addAlert]); // Add dependencies for useEffect\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Logging out...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(Logout, \"Y/hIo88SudPwy9oMym4Lx2GcFY8=\", false, function () {\n  return [useUser, useAlert, useNavigate];\n});\n_c = Logout;\nvar _c;\n$RefreshReg$(_c, \"Logout\");","map":{"version":3,"names":["useEffect","useNavigate","useAlert","useUser","jsxDEV","_jsxDEV","Logout","_s","setUser","addAlert","navigate","handleLogout","refresh","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","ok","Error","removeItem","e","message","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/FullStack/ResuNinja/frontend/src/components/Logout.js"],"sourcesContent":["import { useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAlert } from \"../context/AlertContext\";\r\nimport { useUser } from \"../context/UserContext\";\r\n\r\nexport default function Logout() {\r\n    const { setUser } = useUser();\r\n    const { addAlert } = useAlert();\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const handleLogout = async () => {\r\n            const refresh = localStorage.getItem('refresh_token');\r\n            try {\r\n                const response = await fetch('http://localhost:8000/api/logout/', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify({ refresh }),\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Logout Failed');\r\n                }\r\n\r\n                // Clear tokens and user data from local storage\r\n                localStorage.removeItem('access_token');\r\n                localStorage.removeItem('refresh_token');\r\n                localStorage.removeItem('user');\r\n                setUser({}); // Reset user state in context\r\n\r\n                addAlert('Logout successful!', 'success');\r\n                navigate('/login'); // Navigate to login page after logout\r\n            } catch (e) {\r\n                addAlert(e.message, 'error');\r\n                navigate('/login'); // Navigate to login page on error as well\r\n            }\r\n        };\r\n\r\n        handleLogout(); // Call the logout function on component mount\r\n    }, [setUser, navigate, addAlert]); // Add dependencies for useEffect\r\n\r\n    return (\r\n        <div>\r\n            Logging out...\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,OAAO,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM;IAAEC;EAAQ,CAAC,GAAGL,OAAO,CAAC,CAAC;EAC7B,MAAM;IAAEM;EAAS,CAAC,GAAGP,QAAQ,CAAC,CAAC;EAC/B,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZ,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;MACrD,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;UAC9DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAET;UAAQ,CAAC;QACpC,CAAC,CAAC;QAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;QACpC;;QAEA;QACAV,YAAY,CAACW,UAAU,CAAC,cAAc,CAAC;QACvCX,YAAY,CAACW,UAAU,CAAC,eAAe,CAAC;QACxCX,YAAY,CAACW,UAAU,CAAC,MAAM,CAAC;QAC/BhB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;QAEbC,QAAQ,CAAC,oBAAoB,EAAE,SAAS,CAAC;QACzCC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,OAAOe,CAAC,EAAE;QACRhB,QAAQ,CAACgB,CAAC,CAACC,OAAO,EAAE,OAAO,CAAC;QAC5BhB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;MACxB;IACJ,CAAC;IAEDC,YAAY,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC,EAAE,CAACH,OAAO,EAAEE,QAAQ,EAAED,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEnC,oBACIJ,OAAA;IAAAsB,QAAA,EAAK;EAEL;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAEd;AAACxB,EAAA,CA3CuBD,MAAM;EAAA,QACNH,OAAO,EACND,QAAQ,EACZD,WAAW;AAAA;AAAA+B,EAAA,GAHR1B,MAAM;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}